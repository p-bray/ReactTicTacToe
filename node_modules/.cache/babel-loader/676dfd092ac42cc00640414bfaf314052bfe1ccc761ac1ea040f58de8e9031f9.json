{"ast":null,"code":"// import { useState } from 'react';\n\n// function Square({value, onSquareClick}) {\n//   // const [value, setValue] = useState(null); \n//   // //test of the 'set' functionality to see if I could set whatever I want. \n//   // const [chungus, setChungus] = useState(null);\n\n//   // function handleClick(){\n//   //   // console.log(\"clicked on button with value of  \"+ value);\n//   //   setValue(\"X\");\n//   //   setChungus(\"chung\");\n//   // }\n\n//   // return (\n//   //   <button \n//   //     class=\"square\"\n//   //     onClick={handleClick}\n//   //   >\n//   //     {value}\n//   //   </button>\n//   // );\n//   return <button className=\"square\" onClick={onSquareClick}>{value}</button>\n// }  \n\n// function Row({rowId}) {\n//   var id = \"rowId\"+rowId;\n\n//   return <div id={id} class=\"board-row\"></div>;\n// }\n\n// function Board({ xIsNext, squares, onPlay }) {\n//   function handleClick(i) {\n//     if (calculateWinner(squares) || squares[i]) {\n//       return;\n//     }\n//     const nextSquares = squares.slice();\n//     if (xIsNext) {\n//       nextSquares[i] = 'X';\n//     } else {\n//       nextSquares[i] = 'O';\n//     }\n//     onPlay(nextSquares);\n//   }\n\n//   const winner = calculateWinner(squares);\n//   let status;\n//   if (winner) {\n//     status = 'Winner: ' + winner;\n//   } else {\n//     status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n//   }\n\n//   return (\n//     <>\n//       <div className=\"status\">{status}</div>\n//       <div className=\"board-row\">\n//         <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n//         <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n//         <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n//       </div>\n//       <div className=\"board-row\">\n//         <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n//         <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n//         <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n//       </div>\n//       <div className=\"board-row\">\n//         <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n//         <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n//         <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n//       </div>\n//     </>\n//   );\n// };\n\n// //   // //handle what happens when a square is clicked. \n// //   // function handleClick(i){\n// //   //   //establish nextSquares as just the squares array. Slice with no params just returns the array.\n// //   //   //we do this to reinforce immutability standards\n// //   //   if(squares[i] || calculateWinner(squares)){\n// //   //     return;\n// //   //   }\n// //   //   const nextSquares = squares.slice();\n// //   //   if(xIsNext){\n// //   //     nextSquares[i] = \"X\";\n// //   //     setXIsNext(false);\n// //   //   }else{\n// //   //     nextSquares[i] = \"O\";\n// //   //     setXIsNext(true);\n// //   //   }\n// //   //   setSquares(nextSquares);\n// //   //   if(calculateWinner(squares)){\n// //   //     setStatus(calculateWinner(squares) + \" is the winner\");\n// //   //     return;\n// //   //   }\n// //   // }  \n\n// //   //for handle click, we use the () => handleClick(0) syntax\n// //   //basically, () is just a new function that we want the square to run when clicked. \n// //   //this gets around the infinite looping error by establishing a function to call, \n// //   //not calling a function. \n// //   return (\n// //     <>\n// //       <div class='board-row'>\n// //         <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n// //         <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n// //         <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n// //       </div>\n// //       <div class='board-row'>\n// //         <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n// //         <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n// //         <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n// //       </div>\n// //       <div class='board-row'>\n// //         <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n// //         <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n// //         <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n// //       </div>\n\n// //       <div className=\"status\"><p>{status}</p></div>\n// //     </>\n\n// //   );\n// //   // return <BuildBoard dimensions={3}/>;\n// // }\n\n// //only returns a value if there is a winner. otherwise, its null\n// function calculateWinner(squares) {\n//   //same value on any of these lines would be a winning line. \n//   const lines = [\n//     [0, 1, 2],\n//     [3, 4, 5],\n//     [6, 7, 8],\n//     [0, 3, 6],\n//     [1, 4, 7],\n//     [2, 5, 8],\n//     [0, 4, 8],\n//     [2, 4, 6]\n//   ];\n\n//   for(let i = 0; i < lines.length; i++){\n//     const [a,b,c] = lines[i];\n//     //checks to make sure that all values on the line are equivalent.\n//     if(squares[a] && squares[a] == squares[b] && squares[a] == squares[c]){\n//       return squares[a];\n//     }\n//   }\n//   return null;\n// }\n\n// export default function Game(){\n//   const [xIsNext, setXIsNext] = useState(true);\n//   const [history, setHistory] = useState([Array(9).fill(null)]);\n//   const currentSquares = history[history.length-1];\n\n//   function handlePlay(nextSquares) {\n//     setHistory([...history, nextSquares]);\n//     setXIsNext(!xIsNext);\n//   }\n\n//   function jumpTo(nextMove){\n//     //todo\n//   }\n\n//   const moves = history.map((squares, move) => {\n//     let description;\n//     if(move>0){\n//       description = 'go to move  3' + move;\n//     }else{\n//       description = 'go to game start';\n//     }\n//     return (\n//       <li>\n//         <button onClick={() => jumpTo(move)}>{description}</button>>\n//       </li>\n//     );\n//   });\n\n//   return (\n//     <>\n//       <div className='game'>\n//         <div className='game-board'>\n//           <Board xIsNext={xIsNext} currentSquares={currentSquares} onPlay={handlePlay}/>\n//         </div>\n//       </div>\n//       <div className='game-info'>\n//         <ol></ol>\n//       </div>\n//     </>\n//   )\n// }\n\n// //builds the squares of the board\n// function BuildBoard(dimensions) {\n//   // //3 columns of  3 rows of buttons. \n//   // var board = null;\n\n//   // //iterate through rows\n//   // for (let index = 0; index < dimensions+1; index++) {\n//   //   var rowId = \"row\"+index;\n//   //   board += <Row id={index}/>\n\n//   //   //iterate through columns\n//   //   for (let index = 0; index < dimensions+1; index++){\n//   //     var row = document.getElementById(\"rowId\"+index);\n//   //     row += <Square id='1'/>\n//   //   }\n\n//   // }\n\n//   // return board;\n// }","map":{"version":3,"names":[],"sources":["C:/Users/pbr23/Documents/WebStuff/LearningReact/ReactTicTacToe/src/App.js"],"sourcesContent":["// import { useState } from 'react';\r\n\r\n// function Square({value, onSquareClick}) {\r\n//   // const [value, setValue] = useState(null); \r\n//   // //test of the 'set' functionality to see if I could set whatever I want. \r\n//   // const [chungus, setChungus] = useState(null);\r\n  \r\n//   // function handleClick(){\r\n//   //   // console.log(\"clicked on button with value of  \"+ value);\r\n//   //   setValue(\"X\");\r\n//   //   setChungus(\"chung\");\r\n//   // }\r\n\r\n//   // return (\r\n//   //   <button \r\n//   //     class=\"square\"\r\n//   //     onClick={handleClick}\r\n//   //   >\r\n//   //     {value}\r\n//   //   </button>\r\n//   // );\r\n//   return <button className=\"square\" onClick={onSquareClick}>{value}</button>\r\n// }  \r\n\r\n// function Row({rowId}) {\r\n//   var id = \"rowId\"+rowId;\r\n\r\n//   return <div id={id} class=\"board-row\"></div>;\r\n// }\r\n\r\n// function Board({ xIsNext, squares, onPlay }) {\r\n//   function handleClick(i) {\r\n//     if (calculateWinner(squares) || squares[i]) {\r\n//       return;\r\n//     }\r\n//     const nextSquares = squares.slice();\r\n//     if (xIsNext) {\r\n//       nextSquares[i] = 'X';\r\n//     } else {\r\n//       nextSquares[i] = 'O';\r\n//     }\r\n//     onPlay(nextSquares);\r\n//   }\r\n\r\n//   const winner = calculateWinner(squares);\r\n//   let status;\r\n//   if (winner) {\r\n//     status = 'Winner: ' + winner;\r\n//   } else {\r\n//     status = 'Next player: ' + (xIsNext ? 'X' : 'O');\r\n//   }\r\n\r\n//   return (\r\n//     <>\r\n//       <div className=\"status\">{status}</div>\r\n//       <div className=\"board-row\">\r\n//         <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\r\n//         <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\r\n//         <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\r\n//       </div>\r\n//       <div className=\"board-row\">\r\n//         <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\r\n//         <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\r\n//         <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\r\n//       </div>\r\n//       <div className=\"board-row\">\r\n//         <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\r\n//         <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\r\n//         <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\r\n//       </div>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n\r\n\r\n// //   // //handle what happens when a square is clicked. \r\n// //   // function handleClick(i){\r\n// //   //   //establish nextSquares as just the squares array. Slice with no params just returns the array.\r\n// //   //   //we do this to reinforce immutability standards\r\n// //   //   if(squares[i] || calculateWinner(squares)){\r\n// //   //     return;\r\n// //   //   }\r\n// //   //   const nextSquares = squares.slice();\r\n// //   //   if(xIsNext){\r\n// //   //     nextSquares[i] = \"X\";\r\n// //   //     setXIsNext(false);\r\n// //   //   }else{\r\n// //   //     nextSquares[i] = \"O\";\r\n// //   //     setXIsNext(true);\r\n// //   //   }\r\n// //   //   setSquares(nextSquares);\r\n// //   //   if(calculateWinner(squares)){\r\n// //   //     setStatus(calculateWinner(squares) + \" is the winner\");\r\n// //   //     return;\r\n// //   //   }\r\n// //   // }  \r\n\r\n// //   //for handle click, we use the () => handleClick(0) syntax\r\n// //   //basically, () is just a new function that we want the square to run when clicked. \r\n// //   //this gets around the infinite looping error by establishing a function to call, \r\n// //   //not calling a function. \r\n// //   return (\r\n// //     <>\r\n// //       <div class='board-row'>\r\n// //         <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\r\n// //         <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\r\n// //         <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\r\n// //       </div>\r\n// //       <div class='board-row'>\r\n// //         <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\r\n// //         <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\r\n// //         <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\r\n// //       </div>\r\n// //       <div class='board-row'>\r\n// //         <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\r\n// //         <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\r\n// //         <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\r\n// //       </div>\r\n  \r\n// //       <div className=\"status\"><p>{status}</p></div>\r\n// //     </>\r\n\r\n// //   );\r\n// //   // return <BuildBoard dimensions={3}/>;\r\n// // }\r\n\r\n\r\n\r\n\r\n\r\n// //only returns a value if there is a winner. otherwise, its null\r\n// function calculateWinner(squares) {\r\n//   //same value on any of these lines would be a winning line. \r\n//   const lines = [\r\n//     [0, 1, 2],\r\n//     [3, 4, 5],\r\n//     [6, 7, 8],\r\n//     [0, 3, 6],\r\n//     [1, 4, 7],\r\n//     [2, 5, 8],\r\n//     [0, 4, 8],\r\n//     [2, 4, 6]\r\n//   ];\r\n\r\n//   for(let i = 0; i < lines.length; i++){\r\n//     const [a,b,c] = lines[i];\r\n//     //checks to make sure that all values on the line are equivalent.\r\n//     if(squares[a] && squares[a] == squares[b] && squares[a] == squares[c]){\r\n//       return squares[a];\r\n//     }\r\n//   }\r\n//   return null;\r\n// }\r\n\r\n// export default function Game(){\r\n//   const [xIsNext, setXIsNext] = useState(true);\r\n//   const [history, setHistory] = useState([Array(9).fill(null)]);\r\n//   const currentSquares = history[history.length-1];\r\n\r\n//   function handlePlay(nextSquares) {\r\n//     setHistory([...history, nextSquares]);\r\n//     setXIsNext(!xIsNext);\r\n//   }\r\n\r\n//   function jumpTo(nextMove){\r\n//     //todo\r\n//   }\r\n\r\n//   const moves = history.map((squares, move) => {\r\n//     let description;\r\n//     if(move>0){\r\n//       description = 'go to move  3' + move;\r\n//     }else{\r\n//       description = 'go to game start';\r\n//     }\r\n//     return (\r\n//       <li>\r\n//         <button onClick={() => jumpTo(move)}>{description}</button>>\r\n//       </li>\r\n//     );\r\n//   });\r\n\r\n//   return (\r\n//     <>\r\n//       <div className='game'>\r\n//         <div className='game-board'>\r\n//           <Board xIsNext={xIsNext} currentSquares={currentSquares} onPlay={handlePlay}/>\r\n//         </div>\r\n//       </div>\r\n//       <div className='game-info'>\r\n//         <ol></ol>\r\n//       </div>\r\n//     </>\r\n//   )\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n// //builds the squares of the board\r\n// function BuildBoard(dimensions) {\r\n//   // //3 columns of  3 rows of buttons. \r\n//   // var board = null;\r\n\r\n\r\n//   // //iterate through rows\r\n//   // for (let index = 0; index < dimensions+1; index++) {\r\n//   //   var rowId = \"row\"+index;\r\n//   //   board += <Row id={index}/>\r\n    \r\n//   //   //iterate through columns\r\n//   //   for (let index = 0; index < dimensions+1; index++){\r\n//   //     var row = document.getElementById(\"rowId\"+index);\r\n//   //     row += <Square id='1'/>\r\n//   //   }\r\n    \r\n//   // }\r\n\r\n//   // return board;\r\n// }\r\n\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}