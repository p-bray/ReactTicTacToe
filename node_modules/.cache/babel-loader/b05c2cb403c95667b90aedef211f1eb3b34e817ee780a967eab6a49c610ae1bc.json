{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pbr23\\\\Documents\\\\WebStuff\\\\LearningReact\\\\ReactTicTacToe\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import { useState } from 'react';\n\n// function Square({value, onSquareClick}) {\n//   // const [value, setValue] = useState(null); \n//   // //test of the 'set' functionality to see if I could set whatever I want. \n//   // const [chungus, setChungus] = useState(null);\n\n//   // function handleClick(){\n//   //   // console.log(\"clicked on button with value of  \"+ value);\n//   //   setValue(\"X\");\n//   //   setChungus(\"chung\");\n//   // }\n\n//   // return (\n//   //   <button \n//   //     class=\"square\"\n//   //     onClick={handleClick}\n//   //   >\n//   //     {value}\n//   //   </button>\n//   // );\n//   return <button className=\"square\" onClick={onSquareClick}>{value}</button>\n// }  \n\n// function Row({rowId}) {\n//   var id = \"rowId\"+rowId;\n\n//   return <div id={id} class=\"board-row\"></div>;\n// }\n\n// function Board({ xIsNext, squares, onPlay }) {\n//   function handleClick(i) {\n//     if (calculateWinner(squares) || squares[i]) {\n//       return;\n//     }\n//     const nextSquares = squares.slice();\n//     if (xIsNext) {\n//       nextSquares[i] = 'X';\n//     } else {\n//       nextSquares[i] = 'O';\n//     }\n//     onPlay(nextSquares);\n//   }\n\n//   const winner = calculateWinner(squares);\n//   let status;\n//   if (winner) {\n//     status = 'Winner: ' + winner;\n//   } else {\n//     status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n//   }\n\n//   return (\n//     <>\n//       <div className=\"status\">{status}</div>\n//       <div className=\"board-row\">\n//         <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n//         <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n//         <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n//       </div>\n//       <div className=\"board-row\">\n//         <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n//         <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n//         <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n//       </div>\n//       <div className=\"board-row\">\n//         <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n//         <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n//         <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n//       </div>\n//     </>\n//   );\n// };\n\n// //   // //handle what happens when a square is clicked. \n// //   // function handleClick(i){\n// //   //   //establish nextSquares as just the squares array. Slice with no params just returns the array.\n// //   //   //we do this to reinforce immutability standards\n// //   //   if(squares[i] || calculateWinner(squares)){\n// //   //     return;\n// //   //   }\n// //   //   const nextSquares = squares.slice();\n// //   //   if(xIsNext){\n// //   //     nextSquares[i] = \"X\";\n// //   //     setXIsNext(false);\n// //   //   }else{\n// //   //     nextSquares[i] = \"O\";\n// //   //     setXIsNext(true);\n// //   //   }\n// //   //   setSquares(nextSquares);\n// //   //   if(calculateWinner(squares)){\n// //   //     setStatus(calculateWinner(squares) + \" is the winner\");\n// //   //     return;\n// //   //   }\n// //   // }  \n\n// //   //for handle click, we use the () => handleClick(0) syntax\n// //   //basically, () is just a new function that we want the square to run when clicked. \n// //   //this gets around the infinite looping error by establishing a function to call, \n// //   //not calling a function. \n// //   return (\n// //     <>\n// //       <div class='board-row'>\n// //         <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\n// //         <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\n// //         <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\n// //       </div>\n// //       <div class='board-row'>\n// //         <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\n// //         <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\n// //         <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\n// //       </div>\n// //       <div class='board-row'>\n// //         <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\n// //         <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\n// //         <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\n// //       </div>\n\n// //       <div className=\"status\"><p>{status}</p></div>\n// //     </>\n\n// //   );\n// //   // return <BuildBoard dimensions={3}/>;\n// // }\n\n// //only returns a value if there is a winner. otherwise, its null\n// function calculateWinner(squares) {\n//   //same value on any of these lines would be a winning line. \n//   const lines = [\n//     [0, 1, 2],\n//     [3, 4, 5],\n//     [6, 7, 8],\n//     [0, 3, 6],\n//     [1, 4, 7],\n//     [2, 5, 8],\n//     [0, 4, 8],\n//     [2, 4, 6]\n//   ];\n\n//   for(let i = 0; i < lines.length; i++){\n//     const [a,b,c] = lines[i];\n//     //checks to make sure that all values on the line are equivalent.\n//     if(squares[a] && squares[a] == squares[b] && squares[a] == squares[c]){\n//       return squares[a];\n//     }\n//   }\n//   return null;\n// }\n\n// export default function Game(){\n//   const [xIsNext, setXIsNext] = useState(true);\n//   const [history, setHistory] = useState([Array(9).fill(null)]);\n//   const currentSquares = history[history.length-1];\n\n//   function handlePlay(nextSquares) {\n//     setHistory([...history, nextSquares]);\n//     setXIsNext(!xIsNext);\n//   }\n\n//   function jumpTo(nextMove){\n//     //todo\n//   }\n\n//   const moves = history.map((squares, move) => {\n//     let description;\n//     if(move>0){\n//       description = 'go to move  3' + move;\n//     }else{\n//       description = 'go to game start';\n//     }\n//     return (\n//       <li>\n//         <button onClick={() => jumpTo(move)}>{description}</button>>\n//       </li>\n//     );\n//   });\n\n//   return (\n//     <>\n//       <div className='game'>\n//         <div className='game-board'>\n//           <Board xIsNext={xIsNext} currentSquares={currentSquares} onPlay={handlePlay}/>\n//         </div>\n//       </div>\n//       <div className='game-info'>\n//         <ol></ol>\n//       </div>\n//     </>\n//   )\n// }\n\n// //builds the squares of the board\n// function BuildBoard(dimensions) {\n//   // //3 columns of  3 rows of buttons. \n//   // var board = null;\n\n//   // //iterate through rows\n//   // for (let index = 0; index < dimensions+1; index++) {\n//   //   var rowId = \"row\"+index;\n//   //   board += <Row id={index}/>\n\n//   //   //iterate through columns\n//   //   for (let index = 0; index < dimensions+1; index++){\n//   //     var row = document.getElementById(\"rowId\"+index);\n//   //     row += <Square id='1'/>\n//   //   }\n\n//   // }\n\n//   // return board;\n// }\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 5\n  }, this);\n}\n_c = Square;\nfunction Board({\n  xIsNext,\n  squares,\n  onPlay\n}) {\n  function handleClick(i) {\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = 'X';\n    } else {\n      nextSquares[i] = 'O';\n    }\n    onPlay(nextSquares);\n  }\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = 'Winner: ' + winner;\n  } else {\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[0],\n        onSquareClick: () => handleClick(0)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[1],\n        onSquareClick: () => handleClick(1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[2],\n        onSquareClick: () => handleClick(2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[3],\n        onSquareClick: () => handleClick(3)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[4],\n        onSquareClick: () => handleClick(4)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[5],\n        onSquareClick: () => handleClick(5)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[6],\n        onSquareClick: () => handleClick(6)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[7],\n        onSquareClick: () => handleClick(7)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[8],\n        onSquareClick: () => handleClick(8)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_c2 = Board;\nexport default function Game() {\n  _s();\n  //properties for history, player order, and current boardState\n  const [xIsNext, setXIsNext] = useState(true);\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  //gets the last board state in the history\n  const currentSquares = history[history.length - 1];\n\n  //\n  function handlePlay(nextSquares) {\n    //Here, [...history, nextSquares] creates a new array that contains all the items in history,\n    // followed by nextSquares. (You can read the ...history spread syntax as “enumerate all the \n    //items in history”.)\n    newHistory = history;\n    newHistory + nextSquares;\n    console.log(newHistory);\n    setHistory([...history, nextSquares]);\n    console.log(history);\n    //sets xIsNext to its opposite value\n    setXIsNext(!xIsNext);\n  }\n  function jumpTo(nextMove) {\n    // TODO\n  }\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = 'Go to move #' + move;\n    } else {\n      description = 'Go to game start';\n    }\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => jumpTo(move),\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        xIsNext: xIsNext,\n        squares: currentSquares,\n        onPlay: handlePlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: moves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 323,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"SgYnsXT3crq7e7AVQFAc92TDVPk=\");\n_c3 = Game;\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","xIsNext","squares","onPlay","handleClick","i","calculateWinner","nextSquares","slice","winner","status","_c2","Game","_s","setXIsNext","history","setHistory","Array","fill","currentSquares","length","handlePlay","newHistory","console","log","jumpTo","nextMove","moves","map","move","description","_c3","lines","a","b","c","$RefreshReg$"],"sources":["C:/Users/pbr23/Documents/WebStuff/LearningReact/ReactTicTacToe/src/App.js"],"sourcesContent":["// import { useState } from 'react';\r\n\r\n// function Square({value, onSquareClick}) {\r\n//   // const [value, setValue] = useState(null); \r\n//   // //test of the 'set' functionality to see if I could set whatever I want. \r\n//   // const [chungus, setChungus] = useState(null);\r\n  \r\n//   // function handleClick(){\r\n//   //   // console.log(\"clicked on button with value of  \"+ value);\r\n//   //   setValue(\"X\");\r\n//   //   setChungus(\"chung\");\r\n//   // }\r\n\r\n//   // return (\r\n//   //   <button \r\n//   //     class=\"square\"\r\n//   //     onClick={handleClick}\r\n//   //   >\r\n//   //     {value}\r\n//   //   </button>\r\n//   // );\r\n//   return <button className=\"square\" onClick={onSquareClick}>{value}</button>\r\n// }  \r\n\r\n// function Row({rowId}) {\r\n//   var id = \"rowId\"+rowId;\r\n\r\n//   return <div id={id} class=\"board-row\"></div>;\r\n// }\r\n\r\n// function Board({ xIsNext, squares, onPlay }) {\r\n//   function handleClick(i) {\r\n//     if (calculateWinner(squares) || squares[i]) {\r\n//       return;\r\n//     }\r\n//     const nextSquares = squares.slice();\r\n//     if (xIsNext) {\r\n//       nextSquares[i] = 'X';\r\n//     } else {\r\n//       nextSquares[i] = 'O';\r\n//     }\r\n//     onPlay(nextSquares);\r\n//   }\r\n\r\n//   const winner = calculateWinner(squares);\r\n//   let status;\r\n//   if (winner) {\r\n//     status = 'Winner: ' + winner;\r\n//   } else {\r\n//     status = 'Next player: ' + (xIsNext ? 'X' : 'O');\r\n//   }\r\n\r\n//   return (\r\n//     <>\r\n//       <div className=\"status\">{status}</div>\r\n//       <div className=\"board-row\">\r\n//         <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\r\n//         <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\r\n//         <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\r\n//       </div>\r\n//       <div className=\"board-row\">\r\n//         <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\r\n//         <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\r\n//         <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\r\n//       </div>\r\n//       <div className=\"board-row\">\r\n//         <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\r\n//         <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\r\n//         <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\r\n//       </div>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n\r\n\r\n// //   // //handle what happens when a square is clicked. \r\n// //   // function handleClick(i){\r\n// //   //   //establish nextSquares as just the squares array. Slice with no params just returns the array.\r\n// //   //   //we do this to reinforce immutability standards\r\n// //   //   if(squares[i] || calculateWinner(squares)){\r\n// //   //     return;\r\n// //   //   }\r\n// //   //   const nextSquares = squares.slice();\r\n// //   //   if(xIsNext){\r\n// //   //     nextSquares[i] = \"X\";\r\n// //   //     setXIsNext(false);\r\n// //   //   }else{\r\n// //   //     nextSquares[i] = \"O\";\r\n// //   //     setXIsNext(true);\r\n// //   //   }\r\n// //   //   setSquares(nextSquares);\r\n// //   //   if(calculateWinner(squares)){\r\n// //   //     setStatus(calculateWinner(squares) + \" is the winner\");\r\n// //   //     return;\r\n// //   //   }\r\n// //   // }  \r\n\r\n// //   //for handle click, we use the () => handleClick(0) syntax\r\n// //   //basically, () is just a new function that we want the square to run when clicked. \r\n// //   //this gets around the infinite looping error by establishing a function to call, \r\n// //   //not calling a function. \r\n// //   return (\r\n// //     <>\r\n// //       <div class='board-row'>\r\n// //         <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\r\n// //         <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\r\n// //         <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\r\n// //       </div>\r\n// //       <div class='board-row'>\r\n// //         <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\r\n// //         <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\r\n// //         <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\r\n// //       </div>\r\n// //       <div class='board-row'>\r\n// //         <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\r\n// //         <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\r\n// //         <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\r\n// //       </div>\r\n  \r\n// //       <div className=\"status\"><p>{status}</p></div>\r\n// //     </>\r\n\r\n// //   );\r\n// //   // return <BuildBoard dimensions={3}/>;\r\n// // }\r\n\r\n\r\n\r\n\r\n\r\n// //only returns a value if there is a winner. otherwise, its null\r\n// function calculateWinner(squares) {\r\n//   //same value on any of these lines would be a winning line. \r\n//   const lines = [\r\n//     [0, 1, 2],\r\n//     [3, 4, 5],\r\n//     [6, 7, 8],\r\n//     [0, 3, 6],\r\n//     [1, 4, 7],\r\n//     [2, 5, 8],\r\n//     [0, 4, 8],\r\n//     [2, 4, 6]\r\n//   ];\r\n\r\n//   for(let i = 0; i < lines.length; i++){\r\n//     const [a,b,c] = lines[i];\r\n//     //checks to make sure that all values on the line are equivalent.\r\n//     if(squares[a] && squares[a] == squares[b] && squares[a] == squares[c]){\r\n//       return squares[a];\r\n//     }\r\n//   }\r\n//   return null;\r\n// }\r\n\r\n// export default function Game(){\r\n//   const [xIsNext, setXIsNext] = useState(true);\r\n//   const [history, setHistory] = useState([Array(9).fill(null)]);\r\n//   const currentSquares = history[history.length-1];\r\n\r\n//   function handlePlay(nextSquares) {\r\n//     setHistory([...history, nextSquares]);\r\n//     setXIsNext(!xIsNext);\r\n//   }\r\n\r\n//   function jumpTo(nextMove){\r\n//     //todo\r\n//   }\r\n\r\n//   const moves = history.map((squares, move) => {\r\n//     let description;\r\n//     if(move>0){\r\n//       description = 'go to move  3' + move;\r\n//     }else{\r\n//       description = 'go to game start';\r\n//     }\r\n//     return (\r\n//       <li>\r\n//         <button onClick={() => jumpTo(move)}>{description}</button>>\r\n//       </li>\r\n//     );\r\n//   });\r\n\r\n//   return (\r\n//     <>\r\n//       <div className='game'>\r\n//         <div className='game-board'>\r\n//           <Board xIsNext={xIsNext} currentSquares={currentSquares} onPlay={handlePlay}/>\r\n//         </div>\r\n//       </div>\r\n//       <div className='game-info'>\r\n//         <ol></ol>\r\n//       </div>\r\n//     </>\r\n//   )\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n// //builds the squares of the board\r\n// function BuildBoard(dimensions) {\r\n//   // //3 columns of  3 rows of buttons. \r\n//   // var board = null;\r\n\r\n\r\n//   // //iterate through rows\r\n//   // for (let index = 0; index < dimensions+1; index++) {\r\n//   //   var rowId = \"row\"+index;\r\n//   //   board += <Row id={index}/>\r\n    \r\n//   //   //iterate through columns\r\n//   //   for (let index = 0; index < dimensions+1; index++){\r\n//   //     var row = document.getElementById(\"rowId\"+index);\r\n//   //     row += <Square id='1'/>\r\n//   //   }\r\n    \r\n//   // }\r\n\r\n//   // return board;\r\n// }\r\n\r\nimport { useState } from 'react';\r\n\r\nfunction Square({ value, onSquareClick }) {\r\n  return (\r\n    <button className=\"square\" onClick={onSquareClick}>\r\n      {value}\r\n    </button>\r\n  );\r\n}\r\n\r\nfunction Board({ xIsNext, squares, onPlay }) {\r\n  function handleClick(i) {\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    const nextSquares = squares.slice();\r\n    if (xIsNext) {\r\n      nextSquares[i] = 'X';\r\n    } else {\r\n      nextSquares[i] = 'O';\r\n    }\r\n    onPlay(nextSquares);\r\n  }\r\n\r\n  const winner = calculateWinner(squares);\r\n  let status;\r\n  if (winner) {\r\n    status = 'Winner: ' + winner;\r\n  } else {\r\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"status\">{status}</div>\r\n      <div className=\"board-row\">\r\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\r\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\r\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\r\n      </div>\r\n      <div className=\"board-row\">\r\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\r\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\r\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\r\n      </div>\r\n      <div className=\"board-row\">\r\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\r\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\r\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default function Game() {\r\n  //properties for history, player order, and current boardState\r\n  const [xIsNext, setXIsNext] = useState(true);\r\n  const [history, setHistory] = useState([Array(9).fill(null)]);\r\n  //gets the last board state in the history\r\n  const currentSquares = history[history.length - 1];\r\n\r\n  //\r\n  function handlePlay(nextSquares) {\r\n    //Here, [...history, nextSquares] creates a new array that contains all the items in history,\r\n    // followed by nextSquares. (You can read the ...history spread syntax as “enumerate all the \r\n    //items in history”.)\r\n    newHistory = history;\r\n    newHistory + nextSquares;\r\n    console.log(newHistory);\r\n    setHistory([...history, nextSquares]);\r\n    console.log(history);\r\n    //sets xIsNext to its opposite value\r\n    setXIsNext(!xIsNext);\r\n  }\r\n\r\n  function jumpTo(nextMove) {\r\n    // TODO\r\n  }\r\n\r\n  const moves = history.map((squares, move) => {\r\n    let description;\r\n    if (move > 0) {\r\n      description = 'Go to move #' + move;\r\n    } else {\r\n      description = 'Go to game start';\r\n    }\r\n    return (\r\n      <li>\r\n        <button onClick={() => jumpTo(move)}>{description}</button>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-board\">\r\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\r\n      </div>\r\n      <div className=\"game-info\">\r\n        <ol>{moves}</ol>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,SAASA,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEjC,SAASC,MAAMA,CAAC;EAAEC,KAAK;EAAEC;AAAc,CAAC,EAAE;EACxC,oBACEL,OAAA;IAAQM,SAAS,EAAC,QAAQ;IAACC,OAAO,EAAEF,aAAc;IAAAG,QAAA,EAC/CJ;EAAK;IAAAK,QAAA,EAAAC,YAAA;IA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}