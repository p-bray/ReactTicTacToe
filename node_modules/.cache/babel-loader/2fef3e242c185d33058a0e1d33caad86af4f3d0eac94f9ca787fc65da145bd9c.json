{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pbr23\\\\Documents\\\\WebStuff\\\\LearningReact\\\\ReactTicTacToe\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick\n}) {\n  // const [value, setValue] = useState(null); \n  // //test of the 'set' functionality to see if I could set whatever I want. \n  // const [chungus, setChungus] = useState(null);\n\n  // function handleClick(){\n  //   // console.log(\"clicked on button with value of  \"+ value);\n  //   setValue(\"X\");\n  //   setChungus(\"chung\");\n  // }\n\n  // return (\n  //   <button \n  //     class=\"square\"\n  //     onClick={handleClick}\n  //   >\n  //     {value}\n  //   </button>\n  // );\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 10\n  }, this);\n}\n_c = Square;\nfunction Row({\n  rowId\n}) {\n  var id = \"rowId\" + rowId;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: id,\n    class: \"board-row\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 10\n  }, this);\n}\n_c2 = Row;\nexport default function Board() {\n  _s();\n  /*Array(9).fill(null) creates an array with nine elements and sets each of them to null. \r\n  The useState() call around it declares a squares state variable that’s initially set to that array. \r\n  Each entry in the array corresponds to the value of a square*/\n  const [squares, setSquares] = useState(Array(9).fill(null));\n\n  //this makes it so that the X player always plays first on the start of the game. \n  const [xIsNext, setXIsNext] = useState(true);\n\n  //handle what happens when a square is clicked. \n  function handleClick(i) {\n    //establish nextSquares as just the squares array. Slice with no params just returns the array.\n    //we do this to reinforce immutability standards\n    if (squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = \"X\";\n      setXIsNext(false);\n    } else {\n      nextSquares[i] = \"O\";\n      setXIsNext(true);\n    }\n    setSquares(nextSquares);\n  }\n\n  //for handle click, we use the () => handleClick(0) syntax\n  //basically, () is just a new function that we want the square to run when clicked. \n  //this gets around the infinite looping error by establishing a function to call, \n  //not calling a function. \n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[0],\n        onSquareClick: () => handleClick(0)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[1],\n        onSquareClick: () => handleClick(1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[2],\n        onSquareClick: () => handleClick(2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[3],\n        onSquareClick: () => handleClick(3)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[4],\n        onSquareClick: () => handleClick(4)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[5],\n        onSquareClick: () => handleClick(5)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[6],\n        onSquareClick: () => handleClick(6)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[7],\n        onSquareClick: () => handleClick(7)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[8],\n        onSquareClick: () => handleClick(8)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: squares\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n  // return <BuildBoard dimensions={3}/>;\n}\n\n//builds the squares of the board\n_s(Board, \"wTO2hpxpqozRtberum9qOOyGlUY=\");\n_c3 = Board;\nfunction BuildBoard(dimensions) {\n  // //3 columns of  3 rows of buttons. \n  // var board = null;\n\n  // //iterate through rows\n  // for (let index = 0; index < dimensions+1; index++) {\n  //   var rowId = \"row\"+index;\n  //   board += <Row id={index}/>\n\n  //   //iterate through columns\n  //   for (let index = 0; index < dimensions+1; index++){\n  //     var row = document.getElementById(\"rowId\"+index);\n  //     row += <Square id='1'/>\n  //   }\n\n  // }\n\n  // return board;\n}\n_c4 = BuildBoard;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Row\");\n$RefreshReg$(_c3, \"Board\");\n$RefreshReg$(_c4, \"BuildBoard\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Row","rowId","id","class","_c2","Board","_s","squares","setSquares","Array","fill","xIsNext","setXIsNext","handleClick","i","nextSquares","slice","_c3","BuildBoard","dimensions","_c4","$RefreshReg$"],"sources":["C:/Users/pbr23/Documents/WebStuff/LearningReact/ReactTicTacToe/src/App.js"],"sourcesContent":["import { useState } from 'react';\r\n\r\nfunction Square({value, onSquareClick}) {\r\n  // const [value, setValue] = useState(null); \r\n  // //test of the 'set' functionality to see if I could set whatever I want. \r\n  // const [chungus, setChungus] = useState(null);\r\n  \r\n  // function handleClick(){\r\n  //   // console.log(\"clicked on button with value of  \"+ value);\r\n  //   setValue(\"X\");\r\n  //   setChungus(\"chung\");\r\n  // }\r\n\r\n  // return (\r\n  //   <button \r\n  //     class=\"square\"\r\n  //     onClick={handleClick}\r\n  //   >\r\n  //     {value}\r\n  //   </button>\r\n  // );\r\n  return <button className=\"square\" onClick={onSquareClick}>{value}</button>\r\n}  \r\n\r\nfunction Row({rowId}) {\r\n  var id = \"rowId\"+rowId;\r\n\r\n  return <div id={id} class=\"board-row\"></div>;\r\n}\r\n\r\nexport default function Board() {\r\n  /*Array(9).fill(null) creates an array with nine elements and sets each of them to null. \r\n  The useState() call around it declares a squares state variable that’s initially set to that array. \r\n  Each entry in the array corresponds to the value of a square*/\r\n  const [squares, setSquares] = useState(Array(9).fill(null));\r\n\r\n  //this makes it so that the X player always plays first on the start of the game. \r\n  const [xIsNext, setXIsNext] = useState(true); \r\n\r\n\r\n\r\n  //handle what happens when a square is clicked. \r\n  function handleClick(i){\r\n    //establish nextSquares as just the squares array. Slice with no params just returns the array.\r\n    //we do this to reinforce immutability standards\r\n    if(squares[i]){\r\n      return;\r\n    }\r\n    const nextSquares = squares.slice();\r\n    if(xIsNext){\r\n      nextSquares[i] = \"X\";\r\n      setXIsNext(false);\r\n    }else{\r\n      nextSquares[i] = \"O\";\r\n      setXIsNext(true);\r\n    }\r\n    setSquares(nextSquares);\r\n  }  \r\n\r\n  //for handle click, we use the () => handleClick(0) syntax\r\n  //basically, () is just a new function that we want the square to run when clicked. \r\n  //this gets around the infinite looping error by establishing a function to call, \r\n  //not calling a function. \r\n  return (\r\n    <>\r\n      <div class='board-row'>\r\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\r\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\r\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\r\n      </div>\r\n      <div class='board-row'>\r\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\r\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\r\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\r\n      </div>\r\n      <div class='board-row'>\r\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\r\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\r\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\r\n      </div>\r\n  \r\n      <div><p>{squares}</p></div>\r\n    </>\r\n\r\n  );\r\n  // return <BuildBoard dimensions={3}/>;\r\n}\r\n\r\n\r\n\r\n\r\n//builds the squares of the board\r\nfunction BuildBoard(dimensions) {\r\n  // //3 columns of  3 rows of buttons. \r\n  // var board = null;\r\n\r\n\r\n  // //iterate through rows\r\n  // for (let index = 0; index < dimensions+1; index++) {\r\n  //   var rowId = \"row\"+index;\r\n  //   board += <Row id={index}/>\r\n    \r\n  //   //iterate through columns\r\n  //   for (let index = 0; index < dimensions+1; index++){\r\n  //     var row = document.getElementById(\"rowId\"+index);\r\n  //     row += <Square id='1'/>\r\n  //   }\r\n    \r\n  // }\r\n\r\n  // return board;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}